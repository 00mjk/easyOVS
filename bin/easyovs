#!/usr/bin/python

__author__ = 'baohua'

from optparse import OptionParser
import os
import sys
import time

from easyovs.bridge import brDelFlow,brDump,brList,brShow
from easyovs.cli import CLI
from easyovs.clean import cleanup
from easyovs.log import info, debug, error, output, LEVELS, lg
from easyovs.util import VERSION

# Fix setuptools' evil madness, and open up (more?) security holes
if 'PYTHONPATH' in os.environ:
    sys.path = os.environ[ 'PYTHONPATH' ].split( ':' ) + sys.path

def version( *_args ):
    "Print Mininet version and exit"
    print "%s" % VERSION
    exit()

# optional tests to run
CMDS_ONE = ['cli', 'list']
CMDS_TWO = [ 'dump', 'show']
CMDS_THREE = ['delflow']

class Platform( object ):
    "Build, setup, and run the platform."

    def __init__( self ):
        "Init."
        self.options = None
        self.args = None  # May be used someday for more CLI scripts

        self.parseArgs()
        self.setup()
        self.begin()

    def parseArgs(self):
        desc = ( "The %prog utility creates operation CLI from the\n"
                 "command line. It can run given commands,\n"
                 "invoke the EasyOVS CLI, and run tests." )
        usage = ( '%prog [options]\n'
                  '(type %prog -h for details)' )
        opts = OptionParser( description=desc, usage=usage )
        opts.add_option( '--clean', '-c', action='store_true',
                         default=False, help='clean and exit' )
        opts.add_option( '--cmd', '-m', type='string', default='cli',
                         help='Run customized commands for tests.' )
        opts.add_option( '--verbosity', '-v', type='choice',
                         choices=LEVELS.keys(), default = 'info',
                         help = '|'.join( LEVELS.keys() )  )
        opts.add_option( '--version', action='callback', callback=version )
        self.options, self.args = opts.parse_args()

        if self.args:
            opts.print_help()
            exit()

    def setup( self ):
        "Setup and validate environment."

        # set logging verbosity
        if LEVELS[self.options.verbosity] > LEVELS['output']:
            print ( '*** WARNING: selected verbosity level (%s) will hide CLI '
                    'output!\n'
                    'Please restart easyOVS with -v [debug, info, output].'
                    % self.options.verbosity )
        lg.setLogLevel( self.options.verbosity )

    def begin( self ):
        if self.options.clean:
            cleanup()
            exit()
        start = time.time()

        cmd = self.options.cmd
        if len(cmd.split())==1 and cmd in CMDS_ONE:
            if cmd == 'cli':
                CLI()
            elif cmd == 'list':
                self.list()
        elif len(cmd.split()) == 2:
            if cmd.split()[1] in CMDS_TWO: # e.g., br0 show
                br,func =cmd.split()[0],cmd.split()[1]
                getattr( self, func )(br)
            elif cmd.split()[0] in CMDS_TWO: # e.g., show br0
                func,br =cmd.split()[0],cmd.split()[1]
                getattr( self, func )(br)
            else:
                output('Wrong command format is given\n')
        elif len(cmd.split())==3:
            if cmd.split()[1] in CMDS_THREE: # e.g., br0 delflow 9
                br,func,arg =cmd.split()[0],cmd.split()[1],cmd.split()[2]
                getattr( self, func )(br,arg)
            elif cmd.split()[0] in CMDS_THREE: # e.g., delflow br0 9
                func,br,arg =cmd.split()[0],cmd.split()[1],cmd.split()[2]
                getattr( self, func )(br,arg)
            else:
                output('Wrong command format is given\n')
        else:
            output('Wrong command format is given\n')
        elapsed = float( time.time() - start )
        info( '\n### Completed in %0.3f seconds ###\n' % elapsed )

    def list(self):
        brList()

    def dump(self,br):
        brDump(br)

    def show(self,br):
        brShow(br)

    def delflow(self,br,flow_id):
        brDelFlow(br,flow_id)

if __name__ == "__main__":
    try:
        Platform()
    except KeyboardInterrupt:
        info( "\n\nKeyboard Interrupt. Shutting down and cleaning up...\n\n")
        cleanup()
    except Exception:
        # Print exception
        type_, val_, trace_ = sys.exc_info()
        errorMsg = ( "-"*80 + "\n" +
                     "Caught exception. Cleaning up...\n\n" +
                     "%s: %s\n" % ( type_.__name__, val_ ) +
                     "-"*80 + "\n" )
        error( errorMsg )
        # Print stack trace to debug log
        import traceback
        stackTrace = traceback.format_exc()
        debug( stackTrace + "\n" )
        cleanup()